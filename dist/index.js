var M=Object.create;var p=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var C=(t,r)=>{for(var e in r)p(t,e,{get:r[e],enumerable:!0})},c=(t,r,e,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let n of g(r))!x.call(t,n)&&n!==e&&p(t,n,{get:()=>r[n],enumerable:!(o=S(r,n))||o.enumerable});return t};var O=(t,r,e)=>(e=t!=null?M(H(t)):{},c(r||!t||!t.__esModule?p(e,"default",{value:t,enumerable:!0}):e,t)),D=t=>c(p({},"__esModule",{value:!0}),t);var R={};C(R,{MediaInfo:()=>u});module.exports=D(R);var i=class extends Error{constructor(e,o){super(e);this.message=e;this.higherOrderError=o;Object.setPrototypeOf(this,new.target.prototype)}},a=class extends i{constructor(e,o,n=void 0){super(e,n);this.message=e;this.input=o;this.higherOrderError=n}};var I=require("stream"),m=class{openStream(r){try{let e=I.Readable.from(r);if(e.errored)throw e.errored;return e}catch(e){throw new a("Could not open buffer for read stream",r,e)}}};var h=require("fs");var s=class{openStream(r){try{let e=(0,h.createReadStream)(r);if(e.errored)throw e.errored;return e}catch(e){throw new a("Could not open read stream to the file",r,e)}}};var w=O(require("got"));var f=class{openStream(r){try{let e=w.default.stream(r);if(e.errored)throw e.errored;return e}catch(e){throw new a("Could not open read stream from HTTP address",r,e)}}};var d=class{openStream(r){try{return r}catch(e){throw new a("Could not open read stream to the file",r,e)}}};var y=require("stream"),l=class{static createInputHandler(r){return r instanceof y.Stream?new d:Buffer.isBuffer(r)?new m:typeof r=="string"&&r.toLowerCase().startsWith("http")||r instanceof URL?new f:new s}};var u=class t{lib;libConstructor;constructor(r){this.libConstructor=r}async instantiateLib(){try{this.lib=await this.libConstructor({})}catch(r){throw new i("Failed to instantiate MediaInfoLib",r)}}async getInfo(r){this.lib||await this.instantiateLib();try{return await new Promise((e,o)=>{let n=t.normalizeInput(r);t.getDataStream(n,o).then(b=>this.getMediaInfoData(b)).then(e).catch(o)})}catch(e){throw new i("Failed to read media data",e)}}static normalizeInput(r){let e;return r instanceof URL?e=r.toString():e=r,e}static async getDataStream(r,e){let n=l.createInputHandler(r).openStream(r);return n.on("error",e),n}getMediaInfoData(r){return new Promise(async e=>{let o=new this.lib.MediaInfo;o.Open_Buffer_Init(-1,0),r.on("data",n=>{o.Open_Buffer_Continue(n),o.Open_Buffer_Continue_Goto_Get()}),r.on("end",()=>{o.Open_Buffer_Finalize(),o.Option("Output","JSON"),o.Option("Complete");let n=JSON.parse(o.Inform());o.Close(),o.delete(),e(n)})})}};0&&(module.exports={MediaInfo});
